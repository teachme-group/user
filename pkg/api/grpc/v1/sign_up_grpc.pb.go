// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/sign_up.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SignUpService_SignUpInit_FullMethodName          = "/v1.SignUpService/SignUpInit"
	SignUpService_SignUpConfirmEmail_FullMethodName  = "/v1.SignUpService/SignUpConfirmEmail"
	SignUpService_SignUpEnterPassword_FullMethodName = "/v1.SignUpService/SignUpEnterPassword"
	SignUpService_GetOauthSignUpUrls_FullMethodName  = "/v1.SignUpService/GetOauthSignUpUrls"
	SignUpService_HandleOauthCallback_FullMethodName = "/v1.SignUpService/HandleOauthCallback"
)

// SignUpServiceClient is the client API for SignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignUpServiceClient interface {
	SignUpInit(ctx context.Context, in *SignUpInitRequest, opts ...grpc.CallOption) (*SignUpInitResponse, error)
	SignUpConfirmEmail(ctx context.Context, in *SignUpConfirmEmailRequest, opts ...grpc.CallOption) (*SignUpConfirmEmailResponse, error)
	SignUpEnterPassword(ctx context.Context, in *SignUpEnterPasswordRequest, opts ...grpc.CallOption) (*SignUpEnterPasswordResponse, error)
	GetOauthSignUpUrls(ctx context.Context, in *GetOauthSignUpUrlRequest, opts ...grpc.CallOption) (*GetOauthSignUpUrlResponse, error)
	HandleOauthCallback(ctx context.Context, in *HandleOauthCallbackRequest, opts ...grpc.CallOption) (*HandleOauthCallbackResponse, error)
}

type signUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignUpServiceClient(cc grpc.ClientConnInterface) SignUpServiceClient {
	return &signUpServiceClient{cc}
}

func (c *signUpServiceClient) SignUpInit(ctx context.Context, in *SignUpInitRequest, opts ...grpc.CallOption) (*SignUpInitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpInitResponse)
	err := c.cc.Invoke(ctx, SignUpService_SignUpInit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signUpServiceClient) SignUpConfirmEmail(ctx context.Context, in *SignUpConfirmEmailRequest, opts ...grpc.CallOption) (*SignUpConfirmEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpConfirmEmailResponse)
	err := c.cc.Invoke(ctx, SignUpService_SignUpConfirmEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signUpServiceClient) SignUpEnterPassword(ctx context.Context, in *SignUpEnterPasswordRequest, opts ...grpc.CallOption) (*SignUpEnterPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpEnterPasswordResponse)
	err := c.cc.Invoke(ctx, SignUpService_SignUpEnterPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signUpServiceClient) GetOauthSignUpUrls(ctx context.Context, in *GetOauthSignUpUrlRequest, opts ...grpc.CallOption) (*GetOauthSignUpUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOauthSignUpUrlResponse)
	err := c.cc.Invoke(ctx, SignUpService_GetOauthSignUpUrls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signUpServiceClient) HandleOauthCallback(ctx context.Context, in *HandleOauthCallbackRequest, opts ...grpc.CallOption) (*HandleOauthCallbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleOauthCallbackResponse)
	err := c.cc.Invoke(ctx, SignUpService_HandleOauthCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignUpServiceServer is the server API for SignUpService service.
// All implementations must embed UnimplementedSignUpServiceServer
// for forward compatibility.
type SignUpServiceServer interface {
	SignUpInit(context.Context, *SignUpInitRequest) (*SignUpInitResponse, error)
	SignUpConfirmEmail(context.Context, *SignUpConfirmEmailRequest) (*SignUpConfirmEmailResponse, error)
	SignUpEnterPassword(context.Context, *SignUpEnterPasswordRequest) (*SignUpEnterPasswordResponse, error)
	GetOauthSignUpUrls(context.Context, *GetOauthSignUpUrlRequest) (*GetOauthSignUpUrlResponse, error)
	HandleOauthCallback(context.Context, *HandleOauthCallbackRequest) (*HandleOauthCallbackResponse, error)
	mustEmbedUnimplementedSignUpServiceServer()
}

// UnimplementedSignUpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSignUpServiceServer struct{}

func (UnimplementedSignUpServiceServer) SignUpInit(context.Context, *SignUpInitRequest) (*SignUpInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpInit not implemented")
}
func (UnimplementedSignUpServiceServer) SignUpConfirmEmail(context.Context, *SignUpConfirmEmailRequest) (*SignUpConfirmEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpConfirmEmail not implemented")
}
func (UnimplementedSignUpServiceServer) SignUpEnterPassword(context.Context, *SignUpEnterPasswordRequest) (*SignUpEnterPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpEnterPassword not implemented")
}
func (UnimplementedSignUpServiceServer) GetOauthSignUpUrls(context.Context, *GetOauthSignUpUrlRequest) (*GetOauthSignUpUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthSignUpUrls not implemented")
}
func (UnimplementedSignUpServiceServer) HandleOauthCallback(context.Context, *HandleOauthCallbackRequest) (*HandleOauthCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleOauthCallback not implemented")
}
func (UnimplementedSignUpServiceServer) mustEmbedUnimplementedSignUpServiceServer() {}
func (UnimplementedSignUpServiceServer) testEmbeddedByValue()                       {}

// UnsafeSignUpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignUpServiceServer will
// result in compilation errors.
type UnsafeSignUpServiceServer interface {
	mustEmbedUnimplementedSignUpServiceServer()
}

func RegisterSignUpServiceServer(s grpc.ServiceRegistrar, srv SignUpServiceServer) {
	// If the following call pancis, it indicates UnimplementedSignUpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SignUpService_ServiceDesc, srv)
}

func _SignUpService_SignUpInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignUpServiceServer).SignUpInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignUpService_SignUpInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignUpServiceServer).SignUpInit(ctx, req.(*SignUpInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignUpService_SignUpConfirmEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpConfirmEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignUpServiceServer).SignUpConfirmEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignUpService_SignUpConfirmEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignUpServiceServer).SignUpConfirmEmail(ctx, req.(*SignUpConfirmEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignUpService_SignUpEnterPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpEnterPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignUpServiceServer).SignUpEnterPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignUpService_SignUpEnterPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignUpServiceServer).SignUpEnterPassword(ctx, req.(*SignUpEnterPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignUpService_GetOauthSignUpUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOauthSignUpUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignUpServiceServer).GetOauthSignUpUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignUpService_GetOauthSignUpUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignUpServiceServer).GetOauthSignUpUrls(ctx, req.(*GetOauthSignUpUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignUpService_HandleOauthCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleOauthCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignUpServiceServer).HandleOauthCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignUpService_HandleOauthCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignUpServiceServer).HandleOauthCallback(ctx, req.(*HandleOauthCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SignUpService_ServiceDesc is the grpc.ServiceDesc for SignUpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignUpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SignUpService",
	HandlerType: (*SignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUpInit",
			Handler:    _SignUpService_SignUpInit_Handler,
		},
		{
			MethodName: "SignUpConfirmEmail",
			Handler:    _SignUpService_SignUpConfirmEmail_Handler,
		},
		{
			MethodName: "SignUpEnterPassword",
			Handler:    _SignUpService_SignUpEnterPassword_Handler,
		},
		{
			MethodName: "GetOauthSignUpUrls",
			Handler:    _SignUpService_GetOauthSignUpUrls_Handler,
		},
		{
			MethodName: "HandleOauthCallback",
			Handler:    _SignUpService_HandleOauthCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/sign_up.proto",
}
