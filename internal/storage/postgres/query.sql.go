// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
insert into "user" (login, email, password, created_at)
values ($1, $2, $3, $4)
    returning id, login, email, password, created_at
`

type CreateUserParams struct {
	Login     string
	Email     string
	Password  string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Login,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const validateUserSignUp = `-- name: ValidateUserSignUp :one
select exists(select 1 from "user" where login = $1 or email = $2) as exists
`

type ValidateUserSignUpParams struct {
	Login string
	Email string
}

func (q *Queries) ValidateUserSignUp(ctx context.Context, arg ValidateUserSignUpParams) (bool, error) {
	row := q.db.QueryRow(ctx, validateUserSignUp, arg.Login, arg.Email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
